import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes
// ignore_for_file: unnecessary_brace_in_string_interps

//WARNING: This file is automatically generated. DO NOT EDIT, all your changes would be lost.

typedef LocaleChangeCallback = void Function(Locale locale);

class I18n implements WidgetsLocalizations {
  const I18n();
  static Locale _locale;
  static bool _shouldReload = false;

  static set locale(Locale newLocale) {
    _shouldReload = true;
    I18n._locale = newLocale;
  }

  static const GeneratedLocalizationsDelegate delegate = GeneratedLocalizationsDelegate();

  /// function to be invoked when changing the language
  static LocaleChangeCallback onLocaleChanged;

  static I18n of(BuildContext context) =>
    Localizations.of<I18n>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  /// "Front"
  String get front => "Front";
  /// "Back"
  String get back => "Back";
  /// "Select Audio"
  String get selectAudio => "Select Audio";
  /// "Loading..."
  String get loading => "Loading...";
  /// "Share Video"
  String get shareVideo => "Share Video";
  /// "Delete"
  String get delete => "Delete";
  /// "Convert to Video"
  String get convert => "Convert to Video";
  /// "Creating cover..."
  String get creatingCover => "Creating cover...";
  /// "Converting to video..."
  String get convertingToVideo => "Converting to video...";
  /// "Conversion successful!"
  String get conversionSuccess => "Conversion successful!";
  /// "Do you really want to delete the conversion ${file}?"
  String confirmDelete(String file) => "Do you really want to delete the conversion ${file}?";
  /// "Cancel"
  String get cancel => "Cancel";
}

class _I18n_en_US extends I18n {
  const _I18n_en_US();

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class _I18n_de_DE extends I18n {
  const _I18n_de_DE();

  /// "Vorder-Grund"
  @override
  String get front => "Vorder-Grund";
  /// "Hinter-Grund"
  @override
  String get back => "Hinter-Grund";
  /// "Audio auswählen"
  @override
  String get selectAudio => "Audio auswählen";
  /// "Wird geladen..."
  @override
  String get loading => "Wird geladen...";
  /// "Video teilen"
  @override
  String get shareVideo => "Video teilen";
  /// "Löschen"
  @override
  String get delete => "Löschen";
  /// "In Video konvertieren"
  @override
  String get convert => "In Video konvertieren";
  /// "Cover erstellen..."
  @override
  String get creatingCover => "Cover erstellen...";
  /// "In Video konvertieren..."
  @override
  String get convertingToVideo => "In Video konvertieren...";
  /// "Konvertierung erfolgreich!"
  @override
  String get conversionSuccess => "Konvertierung erfolgreich!";
  /// "Konvertierung ${file} wirklich löschen?"
  @override
  String confirmDelete(String file) => "Konvertierung ${file} wirklich löschen?";
  /// "Abbrechen"
  @override
  String get cancel => "Abbrechen";

  @override
  TextDirection get textDirection => TextDirection.ltr;
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();
  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("en", "US"),
      Locale("de", "DE")
    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      if (isSupported(locale)) {
        return locale;
      }
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    I18n._locale ??= locale;
    I18n._shouldReload = false;
    final String lang = I18n._locale != null ? I18n._locale.toString() : "";
    final String languageCode = I18n._locale != null ? I18n._locale.languageCode : "";
    if ("en_US" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("de_DE" == lang) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_de_DE());
    }
    else if ("en" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_en_US());
    }
    else if ("de" == languageCode) {
      return SynchronousFuture<WidgetsLocalizations>(const _I18n_de_DE());
    }

    return SynchronousFuture<WidgetsLocalizations>(const I18n());
  }

  @override
  bool isSupported(Locale locale) {
    for (var i = 0; i < supportedLocales.length && locale != null; i++) {
      final l = supportedLocales[i];
      if (l.languageCode == locale.languageCode) {
        return true;
      }
    }
    return false;
  }

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => I18n._shouldReload;
}